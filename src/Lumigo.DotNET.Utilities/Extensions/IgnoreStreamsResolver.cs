using System.IO;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

namespace Lumigo.DotNET.Utilities.Extensions
{
    public class IgnoreStreamsResolver : DefaultContractResolver
    {
        protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)
        {
            JsonProperty property = base.CreateProperty(member, memberSerialization);

            // Skip properties that are non-serializable (e.g., ExecutionContext, AsyncTaskMethodBuilder)
            if (property.PropertyType == typeof(System.Threading.ExecutionContext) ||
                property.PropertyType == typeof(System.Threading.Tasks.Task) ||
                property.PropertyType.IsByRef || IsCompilerGeneratedType(property.PropertyType))
            {
                property.Ignored = true;
            }

        return property;
        }

        private bool IsCompilerGeneratedType(Type type)
        {
            // This checks for types generated by the compiler (e.g., AsyncStateMachine types)
            return type.FullName != null && type.FullName.Contains("System.Runtime.CompilerServices");
        }
    }
}
